# Generated by Django 4.2.7 on 2025-03-12 18:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentDifficulty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('lesson', 'Lesson'), ('video', 'Video'), ('quiz', 'Quiz'), ('question', 'Question')], max_length=10, verbose_name='Content Type')),
                ('content_id', models.PositiveIntegerField(verbose_name='Content ID')),
                ('difficulty_score', models.FloatField(default=0.0, verbose_name='Difficulty Score')),
                ('rating_count', models.PositiveIntegerField(default=0, verbose_name='Rating Count')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Content Difficulty',
                'verbose_name_plural': 'Content Difficulties',
                'unique_together': {('content_type', 'content_id')},
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('course_view', 'Course View'), ('lesson_view', 'Lesson View'), ('video_view', 'Video View'), ('quiz_attempt', 'Quiz Attempt'), ('quiz_completion', 'Quiz Completion'), ('course_enrollment', 'Course Enrollment'), ('course_completion', 'Course Completion'), ('profile_update', 'Profile Update'), ('achievement_unlock', 'Achievement Unlock'), ('badge_earn', 'Badge Earn'), ('challenge_accept', 'Challenge Accept'), ('challenge_complete', 'Challenge Complete')], max_length=30, verbose_name='Activity Type')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Details')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LearningInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('strength', 'Strength'), ('weakness', 'Weakness'), ('recommendation', 'Recommendation'), ('pattern', 'Learning Pattern'), ('prediction', 'Prediction')], max_length=20, verbose_name='Insight Type')),
                ('content', models.TextField(verbose_name='Content')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('is_read', models.BooleanField(default=False, verbose_name='Read')),
                ('relevance_score', models.FloatField(default=0.0, verbose_name='Relevance Score')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_insights', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Learning Insight',
                'verbose_name_plural': 'Learning Insights',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('quiz_average_score', models.FloatField(blank=True, null=True, verbose_name='Quiz Average Score')),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, verbose_name='Time Spent (minutes)')),
                ('content_completed_count', models.PositiveIntegerField(default=0, verbose_name='Content Completed Count')),
                ('points_earned', models.PositiveIntegerField(default=0, verbose_name='Points Earned')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Performance',
                'verbose_name_plural': 'User Performances',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='UserContentDifficultyRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 'Very Easy'), (2, 'Easy'), (3, 'Moderate'), (4, 'Difficult'), (5, 'Very Difficult')], verbose_name='Rating')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('content_difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to='analytics.contentdifficulty', verbose_name='Content Difficulty')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='difficulty_ratings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Content Difficulty Rating',
                'verbose_name_plural': 'User Content Difficulty Ratings',
                'unique_together': {('user', 'content_difficulty')},
            },
        ),
    ]
